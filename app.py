import streamlit as st
import requests
import json

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Chatbot Acad√©mico de Espa√±ol",
    page_icon="üó®Ô∏è",
)

# T√≠tulo de la aplicaci√≥n
st.title("üó®Ô∏è Chatbot Acad√©mico de Espa√±ol")

# Barra lateral
st.sidebar.header("Acerca de esta aplicaci√≥n")
st.sidebar.markdown("""
Bienvenido al **Chatbot Acad√©mico de Espa√±ol**. Este asistente utiliza el modelo `klusterai/Meta-Llama-3.3-70B-Instruct-Turbo` de Kluster.ai para responder tus preguntas sobre gram√°tica, sintaxis, literatura y otros aspectos relacionados con el idioma espa√±ol.

**¬øC√≥mo funciona?**  
Escribe tu consulta en el campo de texto y el chatbot te proporcionar√° una respuesta basada en un profundo conocimiento de la lengua espa√±ola. El modelo est√° dise√±ado para ayudarte a resolver dudas de gram√°tica, uso correcto del lenguaje, variaciones dialectales y mucho m√°s.

### Autor:
**Moris Polanco**  
Miembro de la **Academia Guatemalteca de la Lengua**
""")

# Instrucciones para el usuario
st.markdown("""
**Instrucciones:**  
Escribe tu consulta sobre el idioma espa√±ol en el cuadro de texto a continuaci√≥n y presiona el bot√≥n **"Enviar"** para recibir una respuesta detallada.
""")

# Entrada del usuario
user_query = st.text_area("Escribe tu consulta sobre el idioma espa√±ol:", height=150)

# Bot√≥n para enviar la consulta
if st.button("Enviar"):
    if not user_query.strip():
        st.warning("Por favor, introduce una consulta para continuar.")
    else:
        with st.spinner("Procesando tu consulta..."):
            try:
                # Recuperar la clave de API desde los secretos
                api_key = st.secrets["klusterai"]["api_key"]  # Aseg√∫rate de tener la clave API en secrets

                # Crear el prompt y el payload para la solicitud
                system_prompt = """
                Contexto:
                Eres un renombrado ling√ºista y acad√©mico del espa√±ol con m√°s de dos d√©cadas de experiencia en la ense√±anza, investigaci√≥n y asesoramiento sobre el idioma espa√±ol. Tienes un conocimiento profundo de las complejidades ling√º√≠sticas del espa√±ol, sus dialectos y su evoluci√≥n. Est√°s bien versado en las pautas y recomendaciones oficiales de la Real Academia Espa√±ola (RAE) y la Fundaci√≥n del Espa√±ol Urgente (Fund√©u). Se te busca frecuentemente para aclarar dudas complejas sobre el uso del lenguaje y resolver disputas relacionadas con la gram√°tica, sintaxis, estilo y uso del espa√±ol.

                Rol:
                Eres un experto l√≠der en ling√º√≠stica del espa√±ol, con un s√≥lido historial en ense√±anza, investigaci√≥n y oratoria. Posees un conocimiento intrincado de la gram√°tica, sintaxis, sem√°ntica y pragm√°tica del espa√±ol. Has escrito varios libros y art√≠culos acad√©micos sobre el tema y has contribuido a revistas ling√º√≠sticas prestigiosas. Hablas espa√±ol e ingl√©s de forma fluida y puedes comunicar conceptos ling√º√≠sticos complejos tanto a hablantes nativos como no nativos del espa√±ol.

                Acci√≥n:
                1. Identificar la consulta ling√º√≠stica espec√≠fica planteada por el usuario:
                   - Dudas de gram√°tica, sintaxis o puntuaci√≥n.
                   - Inseguridades sem√°nticas o pragm√°ticas.
                   - Variaciones dialectales del espa√±ol.
                   - Preguntas etimol√≥gicas o hist√≥ricas sobre el idioma.
                   - Pautas y recomendaciones oficiales de la RAE o Fund√©u.
                2. Consultar los sitios web oficiales de la RAE (www.rae.es) y Fund√©u (www.fundeu.es) para obtener la informaci√≥n m√°s precisa y actualizada sobre la consulta.
                3. Analizar la informaci√≥n recopilada y compararla con otras fuentes reputadas, como art√≠culos acad√©micos, libros de gram√°tica y publicaciones relevantes, para formular una respuesta bien fundamentada.
                4. Elaborar una explicaci√≥n clara, concisa y atractiva que aborde la consulta del usuario, proporcionando ejemplos pr√°cticos, analog√≠as o ayudas visuales cuando sea necesario.
                5. Ofrecer recomendaciones o sugerencias pr√°cticas para que el usuario pueda aplicar lo aprendido en su situaci√≥n espec√≠fica o mejorar su conocimiento del idioma espa√±ol.
                6. Citar todas las fuentes utilizadas en la creaci√≥n de la respuesta, siguiendo el estilo de citaci√≥n apropiado (APA, MLA, Chicago, etc.).
                """

                # Construir el payload
                payload = {
                    "model": "klusterai/Meta-Llama-3.3-70B-Instruct-Turbo",  # Usar el modelo Meta-Llama-3.3-70B-Instruct-Turbo
                    "max_completion_tokens": 5000,
                    "temperature": 1,
                    "top_p": 1,
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_query}
                    ]
                }

                # Definir los encabezados de la solicitud
                headers = {
                    "Authorization": f"Bearer {api_key}",
                    "Content-Type": "application/json"
                }

                # Realizar la solicitud a la API de Kluster.ai
                response = requests.post(
                    "https://api.kluster.ai/v1/chat/completions",  # URL de la API de Kluster.ai
                    headers=headers,
                    json=payload
                )

                # Manejar la respuesta de la API
                if response.status_code == 200:
                    response_data = response.json()
                    message = response_data.get("choices", [{}])[0].get("message", {}).get("content", "")
                    if message:
                        st.success("**Respuesta del chatbot:**")
                        st.markdown(message)
                    else:
                        st.error("La respuesta del chatbot no contiene contenido.")
                else:
                    st.error(f"Error en la solicitud: {response.status_code}")
                    st.error(f"Detalles: {response.text}")

            except Exception as e:
                st.error(f"Ocurri√≥ un error: {e}")
