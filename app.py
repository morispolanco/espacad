import streamlit as st
import requests
import json
import textwrap

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Chatbot Acad√©mico de Espa√±ol",
    page_icon="üó®Ô∏è",
)

# T√≠tulo de la aplicaci√≥n
st.title("üó®Ô∏è Chatbot Acad√©mico de Espa√±ol")

# Instrucciones para el usuario
st.markdown("""
Bienvenido al **Chatbot Acad√©mico de Espa√±ol**. Este asistente utiliza el modelo `gpt-4o-mini` a trav√©s de la API de OpenRouter para responder tus preguntas sobre gram√°tica, sintaxis, literatura y m√°s.
""")

# Par√°metros configurables
st.sidebar.header("Configuraci√≥n del Chatbot")
temperature = st.sidebar.slider(
    "Temperatura",
    min_value=0.0,
    max_value=1.0,
    value=0.7,
    step=0.1,
    help="Controla la creatividad de las respuestas. Valores m√°s altos generan respuestas m√°s creativas."
)
max_tokens = st.sidebar.number_input(
    "M√°ximo de tokens",
    min_value=100,
    max_value=2000,
    value=1000,
    step=100,
    help="Define la longitud m√°xima de la respuesta del chatbot."
)

# Entrada del usuario
user_query = st.text_area("Escribe tu consulta sobre el idioma espa√±ol:", height=150)

# Bot√≥n para enviar la consulta
if st.button("Enviar"):
    if not user_query.strip():
        st.warning("Por favor, introduce una consulta para continuar.")
    else:
        with st.spinner("Procesando tu consulta..."):
            try:
                # Recuperar la clave de API desde los secretos
                api_key = st.secrets["openrouter"]["api_key"]

                # Crear el prompt inicial del sistema
                system_prompt = textwrap.dedent("""
                    **C.R.A.F.T. Prompt para Resolver Dudas y Dificultades del Espa√±ol**
                    
                    **Contexto:**
                    Eres un acad√©mico de la lengua espa√±ola con m√°s de dos d√©cadas de experiencia en la ense√±anza y el estudio del idioma. Tu conocimiento abarca desde la gram√°tica y la sintaxis hasta la sem√°ntica y la pragm√°tica. Adem√°s, est√°s familiarizado con las variantes del espa√±ol en diferentes regiones del mundo, incluyendo sus particularidades l√©xicas y dialectales. Tu objetivo es ayudar a los usuarios a resolver dudas y dificultades espec√≠ficas del espa√±ol, proporcionando explicaciones claras y ejemplos pr√°cticos.
                    
                    **Rol:**
                    Eres un experto en ling√º√≠stica y ense√±anza del espa√±ol, con una vasta experiencia en la resoluci√≥n de dudas ling√º√≠sticas. Tu habilidad para explicar conceptos complejos de manera sencilla y accesible te ha convertido en una referencia en el campo. Adem√°s, tienes un profundo conocimiento de las normas y recomendaciones de la Real Academia Espa√±ola (RAE) y otras instituciones ling√º√≠sticas de prestigio.
                    
                    **Acci√≥n:**
                    
                    1. **Identificaci√≥n de la Duda:** Comienza identificando claramente la duda o dificultad espec√≠fica del espa√±ol que el usuario ha planteado.
                    2. **Explicaci√≥n Te√≥rica:** Proporciona una explicaci√≥n te√≥rica detallada sobre el tema en cuesti√≥n, utilizando t√©rminos t√©cnicos cuando sea necesario, pero asegur√°ndote de que la explicaci√≥n sea comprensible para el usuario.
                    3. **Ejemplos Pr√°cticos:** Incluye ejemplos pr√°cticos que ilustren la explicaci√≥n te√≥rica. Estos ejemplos deben ser relevantes y variados para cubrir diferentes contextos de uso.
                    4. **Referencias Autorizadas:** Cita fuentes autorizadas como la RAE, libros de gram√°tica reconocidos, o art√≠culos acad√©micos que respalden tu explicaci√≥n.
                    5. **Sugerencias Adicionales:** Ofrece sugerencias adicionales o ejercicios pr√°cticos que el usuario pueda realizar para reforzar su comprensi√≥n del tema.
                    6. **Revisi√≥n y Clarificaci√≥n:** Revisa la explicaci√≥n para asegurarte de que sea clara y completa. Si es necesario, aclara cualquier punto que pueda haber quedado ambiguo.
                    
                    **Formato:**
                    El formato de la respuesta debe ser un texto estructurado en markdown, con secciones claramente definidas para cada paso de la acci√≥n. Utiliza encabezados, listas y bloques de c√≥digo para ejemplos cuando sea necesario. Aseg√∫rate de que el texto sea f√°cil de leer y entender, con un lenguaje accesible pero preciso.
                    
                    **P√∫blico Objetivo:**
                    El p√∫blico objetivo son estudiantes de espa√±ol de nivel intermedio a avanzado, profesores de espa√±ol, y cualquier persona interesada en mejorar su comprensi√≥n y uso del idioma. El nivel de detalle debe ser suficiente para satisfacer a usuarios con un conocimiento previo del tema, pero tambi√©n accesible para aquellos que est√°n comenzando a explorar aspectos m√°s avanzados del espa√±ol.
                """)

                # Crear el payload para la solicitud
                payload = {
                    "model": "gpt-4o-mini",  # Verifica el nombre correcto del modelo
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_query}
                    ],
                    "max_tokens": max_tokens,
                    "temperature": temperature,
                }

                # Definir los encabezados de la solicitud
                headers = {
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {api_key}"
                }

                # Realizar la solicitud a la API de OpenRouter
                response = requests.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    data=json.dumps(payload)
                )

                # Manejar la respuesta de la API
                if response.status_code == 200:
                    response_data = response.json()
                    choices = response_data.get("choices")
                    if choices and len(choices) > 0:
                        message = choices[0].get("message")
                        if message:
                            chatbot_reply = message.get("content")
                            if chatbot_reply:
                                st.success("**Respuesta del chatbot:**")
                                st.markdown(chatbot_reply)
                            else:
                                st.error("La respuesta del chatbot no contiene contenido.")
                        else:
                            st.error("La respuesta del chatbot no contiene un mensaje.")
                    else:
                        st.error("La respuesta del chatbot no contiene opciones.")
                elif response.status_code == 401:
                    st.error("Autenticaci√≥n fallida. Verifica tu clave de API.")
                elif response.status_code == 429:
                    st.error("L√≠mite de solicitudes alcanzado. Por favor, intenta m√°s tarde.")
                else:
                    st.error(f"Error en la solicitud: {response.status_code}")
                    st.error(f"Detalles: {response.text}")

            except Exception as e:
                st.error(f"Ocurri√≥ un error: {e}")
